/* eslint-disable camelcase,no-shadow */
// THIS FILE IS AUTOGENERATED BY GRAPHQL-CODEGEN. DO NOT EDIT!
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
	ID: string;
	String: string;
	Boolean: boolean;
	Int: number;
	Float: number;
	/** A custom scalar representing a date in a timestamp format */
	DateTime: number;
};

export type Account = DistributionList | User;

export type Config = {
	__typename?: 'Config';
	name: Scalars['String'];
	value: Scalars['String'];
};

export type DistributionList = {
	__typename?: 'DistributionList';
	id: Scalars['ID'];
	name: Scalars['String'];
	users: Array<Maybe<User>>;
};

export type DistributionListUsersArgs = {
	cursor?: InputMaybe<Scalars['String']>;
	limit: Scalars['Int'];
};

/**  Definition of the File type which implements the Node interface */
export type File = Node & {
	__typename?: 'File';
	cloned_from_version?: Maybe<Scalars['Int']>;
	/**  File creation timestamp */
	created_at: Scalars['DateTime'];
	/**  Creator of the file */
	creator: User;
	/**  Description of the file */
	description: Scalars['String'];
	/**  Extension of the file */
	extension?: Maybe<Scalars['String']>;
	/**  True if the owner has marked the file as favourite, false otherwise */
	flagged: Scalars['Boolean'];
	/**  Unique identifier of the file */
	id: Scalars['ID'];
	/**  Boolean representing if a version in kept forever or not */
	keep_forever: Scalars['Boolean'];
	/**  Last user who has edited the file */
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	/**  Mime type of the file */
	mime_type: Scalars['String'];
	/**  Name of the file */
	name: Scalars['String'];
	/**  Owner of the file */
	owner: User;
	/**  Parent folder containing the file */
	parent?: Maybe<Node>;
	/**  File permissions of the user making the request */
	permissions: Permissions;
	/**  The top level root where the node resides */
	rootId?: Maybe<Scalars['ID']>;
	/**  Specific share of the current file with the target user (if exists) */
	share?: Maybe<Share>;
	/**  List of shares of the current file (if they exist) */
	shares: Array<Maybe<Share>>;
	/**  Size of the file */
	size: Scalars['Float'];
	/**  Type of the node */
	type: NodeType;
	/**  File update timestamp */
	updated_at: Scalars['DateTime'];
	/**  Version of the file */
	version: Scalars['Int'];
};

/**  Definition of the File type which implements the Node interface */
export type FileShareArgs = {
	share_target_id: Scalars['ID'];
};

/**  Definition of the File type which implements the Node interface */
export type FileSharesArgs = {
	cursor?: InputMaybe<Scalars['String']>;
	limit: Scalars['Int'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

/**  Definition of the Folder type which implements the Node interface */
export type Folder = Node & {
	__typename?: 'Folder';
	/**  List of all child nodes of a folder. */
	children: NodePage;
	/**  Folder creation timestamp */
	created_at: Scalars['DateTime'];
	/**  Creator of the folder */
	creator: User;
	/**  Description of the folder */
	description: Scalars['String'];
	/**  True if the owner has marked the folder as favourite, false otherwise */
	flagged: Scalars['Boolean'];
	/**  Unique identifier of the folder */
	id: Scalars['ID'];
	/**  Last user who has edited the folder */
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	/**  Name of the folder */
	name: Scalars['String'];
	/**  Owner of the folder */
	owner: User;
	/**  Parent folder containing the folder. The parent can be null when the current folder is the root */
	parent?: Maybe<Node>;
	/**  Folder permissions of the user making the request */
	permissions: Permissions;
	/**  The top level root where the node resides */
	rootId?: Maybe<Scalars['ID']>;
	/**  Specific share of the current folder with the target user (if exists) */
	share?: Maybe<Share>;
	/**  List of shares of the current folder (if they exist) */
	shares: Array<Maybe<Share>>;
	/**  Type of the node */
	type: NodeType;
	/**  Folder update timestamp */
	updated_at: Scalars['DateTime'];
};

/**  Definition of the Folder type which implements the Node interface */
export type FolderChildrenArgs = {
	limit: Scalars['Int'];
	page_token?: InputMaybe<Scalars['String']>;
	sort: NodeSort;
};

/**  Definition of the Folder type which implements the Node interface */
export type FolderShareArgs = {
	share_target_id: Scalars['ID'];
};

/**  Definition of the Folder type which implements the Node interface */
export type FolderSharesArgs = {
	cursor?: InputMaybe<Scalars['String']>;
	limit: Scalars['Int'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

/**
 *  Definition of the Link type. It represents a public link of a specific node.
 *  Temporarily only a file can have a link
 */
export type Link = {
	__typename?: 'Link';
	/**  Link creation timestamp. */
	created_at: Scalars['DateTime'];
	/**  Link description. It must be shorter than 300 characters. */
	description?: Maybe<Scalars['String']>;
	/**  Link expiration timestamp. */
	expires_at?: Maybe<Scalars['DateTime']>;
	/**  Unique identifier of the link. */
	id: Scalars['ID'];
	/**  Node related to this link. */
	node: Node;
	/**
	 *  Full URL to access the related node. It will be returned only if the requester has the
	 *  <strong>can_share<strong> permission on the node. However anyone who has this link can
	 *  download the node.
	 */
	url?: Maybe<Scalars['String']>;
};

export type Mutation = {
	__typename?: 'Mutation';
	cloneVersion: File;
	/**  Allows to copy a list of Nodes into a specified Folder. */
	copyNodes?: Maybe<Array<Node>>;
	/**  <strong>Creates a new folder</strong> */
	createFolder: Node;
	/**
	 *  Allows to create a public link for an existing node. A link can be created only if the requester has the
	 *  <strong>can_share<strong> permission on the specified node.
	 *  Optionally, an expiration timestamp and/or a description can be set.
	 */
	createLink: Link;
	/**
	 *  Allows to share an existing node to a user specifying the user permissions on that node,
	 *  and, optionally, an expiration timestamp.
	 */
	createShare: Share;
	/**
	 *  Allows to delete a list of links in batch. It returns an array of IDs for each removed link and
	 *  a list of errors for each link that could not be removed.
	 */
	deleteLinks: Array<Maybe<Scalars['ID']>>;
	/**
	 *  Allows to delete a list of nodes. If the node is a folder then this operation removes the node and all its children,
	 *  if the node is a file then it removes all the related versions. This operation requires can_delete permission on
	 *  every node that should be deleted and it cannot be reverted.
	 */
	deleteNodes?: Maybe<Array<Scalars['ID']>>;
	deleteShare: Scalars['Boolean'];
	/** TODO doc */
	deleteVersions: Array<Maybe<Scalars['Int']>>;
	/**  Allows to flag a list of nodes. */
	flagNodes?: Maybe<Array<Scalars['ID']>>;
	keepVersions: Array<Maybe<Scalars['Int']>>;
	/**
	 *  Allows to move a list of nodes into a folder destination. This operation requires write permissions on each file
	 *  should be moved and write permission on the destination folder otherwise it fails.
	 */
	moveNodes?: Maybe<Array<Node>>;
	/**  Restores a list of nodes. */
	restoreNodes?: Maybe<Array<Maybe<Node>>>;
	/**  Trashes a list of nodes. */
	trashNodes?: Maybe<Array<Scalars['ID']>>;
	/**
	 *  Allows to update the expiration timestamp and/or the description of an existing link.
	 *  An existing link can be updated only if the requester has the <strong>can_share<strong>
	 *  permission on the specified node.
	 */
	updateLink?: Maybe<Link>;
	/**  <strong>Update an existing node</strong> */
	updateNode: Node;
	/**  Allows to update the SharePermissions and the expiration timestamp of an existing share. */
	updateShare?: Maybe<Share>;
};

export type MutationCloneVersionArgs = {
	node_id: Scalars['ID'];
	version: Scalars['Int'];
};

export type MutationCopyNodesArgs = {
	destination_id: Scalars['ID'];
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationCreateFolderArgs = {
	destination_id: Scalars['String'];
	name: Scalars['String'];
};

export type MutationCreateLinkArgs = {
	description?: InputMaybe<Scalars['String']>;
	expires_at?: InputMaybe<Scalars['DateTime']>;
	node_id: Scalars['ID'];
};

export type MutationCreateShareArgs = {
	custom_message?: InputMaybe<Scalars['String']>;
	expires_at?: InputMaybe<Scalars['DateTime']>;
	node_id: Scalars['ID'];
	permission: SharePermission;
	share_target_id: Scalars['ID'];
};

export type MutationDeleteLinksArgs = {
	link_ids: Array<Scalars['ID']>;
};

export type MutationDeleteNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationDeleteShareArgs = {
	node_id: Scalars['ID'];
	share_target_id: Scalars['ID'];
};

export type MutationDeleteVersionsArgs = {
	node_id: Scalars['ID'];
	versions?: InputMaybe<Array<Scalars['Int']>>;
};

export type MutationFlagNodesArgs = {
	flag: Scalars['Boolean'];
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationKeepVersionsArgs = {
	keep_forever: Scalars['Boolean'];
	node_id: Scalars['ID'];
	versions: Array<Scalars['Int']>;
};

export type MutationMoveNodesArgs = {
	destination_id: Scalars['ID'];
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationRestoreNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationTrashNodesArgs = {
	node_ids?: InputMaybe<Array<Scalars['ID']>>;
};

export type MutationUpdateLinkArgs = {
	description?: InputMaybe<Scalars['String']>;
	expires_at?: InputMaybe<Scalars['DateTime']>;
	link_id: Scalars['ID'];
};

export type MutationUpdateNodeArgs = {
	description?: InputMaybe<Scalars['String']>;
	flagged?: InputMaybe<Scalars['Boolean']>;
	name?: InputMaybe<Scalars['String']>;
	node_id: Scalars['String'];
};

export type MutationUpdateShareArgs = {
	expires_at?: InputMaybe<Scalars['DateTime']>;
	node_id: Scalars['ID'];
	permission?: InputMaybe<SharePermission>;
	share_target_id: Scalars['ID'];
};

/**  Definition of the Node interface */
export type Node = {
	/**  Node creation timestamp */
	created_at: Scalars['DateTime'];
	/**  Creator of the node (it will be a User type when it will be implemented) */
	creator: User;
	/**  Description of the file/folder */
	description: Scalars['String'];
	/**  True if the owner has marked the node as favourite, false otherwise */
	flagged: Scalars['Boolean'];
	/**  Unique identifier of the node */
	id: Scalars['ID'];
	/**  Last user who has edited the node (it will be a User type when it will be implemented) */
	last_editor?: Maybe<User>;
	links: Array<Maybe<Link>>;
	/**  Name of the file/folder */
	name: Scalars['String'];
	/**  Owner of the node (it will be a User type when it will be implemented) */
	owner: User;
	/**  Parent folder containing the node. The parent can be null when the current node is the root folder */
	parent?: Maybe<Node>;
	/**  Node permissions of the user making the request */
	permissions: Permissions;
	/**  The top level root where the node resides */
	rootId?: Maybe<Scalars['ID']>;
	/**  Specific share of the current node with the target user (if exists) */
	share?: Maybe<Share>;
	/**  List of shares of the current node (if they exist) */
	shares: Array<Maybe<Share>>;
	/**  Type of the node */
	type: NodeType;
	/**  Node update timestamp */
	updated_at: Scalars['DateTime'];
};

/**  Definition of the Node interface */
export type NodeShareArgs = {
	share_target_id: Scalars['ID'];
};

/**  Definition of the Node interface */
export type NodeSharesArgs = {
	cursor?: InputMaybe<Scalars['String']>;
	limit: Scalars['Int'];
	sorts?: InputMaybe<Array<ShareSort>>;
};

export type NodePage = {
	__typename?: 'NodePage';
	/** The list of nodes of the requested page */
	nodes: Array<Maybe<Node>>;
	/**  The token to use as a cursor for requesting the next page of nodes */
	page_token?: Maybe<Scalars['String']>;
};

/**  Definition of the NodeSort enumerator. This is useful for sorting the result of a list of nodes. */
export enum NodeSort {
	LastEditorAsc = 'LAST_EDITOR_ASC',
	LastEditorDesc = 'LAST_EDITOR_DESC',
	NameAsc = 'NAME_ASC',
	NameDesc = 'NAME_DESC',
	OwnerAsc = 'OWNER_ASC',
	OwnerDesc = 'OWNER_DESC',
	SizeAsc = 'SIZE_ASC',
	SizeDesc = 'SIZE_DESC',
	TypeAsc = 'TYPE_ASC',
	TypeDesc = 'TYPE_DESC',
	UpdatedAtAsc = 'UPDATED_AT_ASC',
	UpdatedAtDesc = 'UPDATED_AT_DESC'
}

/** Definition of NodeType enumerator. This is used for discriminating the specific type of a node */
export enum NodeType {
	Application = 'APPLICATION',
	Audio = 'AUDIO',
	Folder = 'FOLDER',
	Image = 'IMAGE',
	Message = 'MESSAGE',
	Other = 'OTHER',
	Presentation = 'PRESENTATION',
	Root = 'ROOT',
	Spreadsheet = 'SPREADSHEET',
	Text = 'TEXT',
	Video = 'VIDEO'
}

/**
 * +---------------------------------+-------------------------------------------------------+
 * | Operation                       | Permission                                            |
 * +---------------------------------+-------------------------------------------------------+
 * | Create folder                   | Destination folder: Write and not trashed             |
 * +---------------------------------+-------------------------------------------------------+
 * | Upload node                     | Destination folder: Write and not trashed             |
 * +---------------------------------+-------------------------------------------------------+
 * | Copy node                       | Node to copy: Read                                    |
 * |                                 | Destination folder: Write and not trashed             |
 * +---------------------------------+-------------------------------------------------------+
 * | Move node                       | Node to move: Write                                   |
 * |                                 | Destination folder: Write and not trashed             |
 * +---------------------------------+-------------------------------------------------------+
 * | Download node                   | Read                                                  |
 * +---------------------------------+-------------------------------------------------------+
 * | Delete node                     | Only the owner can delete a node                      |
 * +---------------------------------+-------------------------------------------------------+
 * | List folder                     | Read Folder                                           |
 * +---------------------------------+-------------------------------------------------------+
 * | Get metadata                    | Read                                                  |
 * +---------------------------------+-------------------------------------------------------+
 * | Update metadata                 | Write                                                 |
 * +---------------------------------+-------------------------------------------------------+
 * | Trash/Untrash a node            | Write                                                 |
 * +---------------------------------+-------------------------------------------------------+
 * | Flag/Unflag a node              | Read                                                  |
 * +---------------------------------+-------------------------------------------------------+
 */
export type Permissions = {
	__typename?: 'Permissions';
	can_add_version: Scalars['Boolean'];
	can_change_link: Scalars['Boolean'];
	can_change_share: Scalars['Boolean'];
	can_delete: Scalars['Boolean'];
	can_read: Scalars['Boolean'];
	can_read_link: Scalars['Boolean'];
	can_read_share: Scalars['Boolean'];
	can_share: Scalars['Boolean'];
	can_write_file: Scalars['Boolean'];
	can_write_folder: Scalars['Boolean'];
};

export type Query = {
	__typename?: 'Query';
	/** <strong> Returns a NodePage based on the given criteria </strong> */
	findNodes?: Maybe<NodePage>;
	getAccountByEmail?: Maybe<Account>;
	getAccountsByEmail: Array<Maybe<Account>>;
	getConfigs: Array<Maybe<Config>>;
	/**
	 *  Returns all the links of the specified node.
	 *  The response is not paginated because each node can have a maximum of 50 links.
	 */
	getLinks: Array<Maybe<Link>>;
	/**  <strong>Returns the attributes of the node specified by ID</strong> */
	getNode?: Maybe<Node>;
	/**
	 *  <strong> Returns the list of nodes corresponding to the path of a node</strong>
	 *  The path is ordered and returns from the highest visible one to the requested node.
	 */
	getPath: Array<Maybe<Node>>;
	/**  Returns the list of all root folders */
	getRootsList: Array<Maybe<Root>>;
	/**  Returns the attributes of the specified share */
	getShare?: Maybe<Share>;
	getUserById?: Maybe<User>;
	getVersions: Array<Maybe<File>>;
};

export type QueryFindNodesArgs = {
	cascade?: InputMaybe<Scalars['Boolean']>;
	direct_share?: InputMaybe<Scalars['Boolean']>;
	flagged?: InputMaybe<Scalars['Boolean']>;
	folder_id?: InputMaybe<Scalars['String']>;
	keywords?: InputMaybe<Array<Scalars['String']>>;
	limit?: InputMaybe<Scalars['Int']>;
	page_token?: InputMaybe<Scalars['String']>;
	shared_by_me?: InputMaybe<Scalars['Boolean']>;
	shared_with_me?: InputMaybe<Scalars['Boolean']>;
	sort?: InputMaybe<NodeSort>;
};

export type QueryGetAccountByEmailArgs = {
	email: Scalars['String'];
};

export type QueryGetAccountsByEmailArgs = {
	emails: Array<Scalars['String']>;
};

export type QueryGetLinksArgs = {
	node_id: Scalars['ID'];
};

export type QueryGetNodeArgs = {
	node_id: Scalars['ID'];
	version?: InputMaybe<Scalars['Int']>;
};

export type QueryGetPathArgs = {
	node_id: Scalars['ID'];
};

export type QueryGetShareArgs = {
	node_id: Scalars['ID'];
	share_target_id: Scalars['ID'];
};

export type QueryGetUserByIdArgs = {
	user_id: Scalars['ID'];
};

export type QueryGetVersionsArgs = {
	node_id: Scalars['ID'];
	versions?: InputMaybe<Array<Scalars['Int']>>;
};

/**  Definition of the type Root. Represents a root folder */
export type Root = {
	__typename?: 'Root';
	/**  Unique identifier of the root */
	id: Scalars['ID'];
	/**  Name of the root */
	name: Scalars['String'];
};

/**  Definition of the Share type. It represents a share between a node and a user. */
export type Share = {
	__typename?: 'Share';
	/**  Share creation timestamp */
	created_at: Scalars['DateTime'];
	/**  Share expiration timestamp */
	expires_at?: Maybe<Scalars['DateTime']>;
	/**  Node shared */
	node: Node;
	/**  User permission for the node */
	permission: SharePermission;
	/**  User to whom a node has been shared */
	share_target?: Maybe<SharedTarget>;
};

/**  The SharePermissions enumerator represents the permissions of a node shared with a user */
export enum SharePermission {
	ReadAndShare = 'READ_AND_SHARE',
	ReadAndWrite = 'READ_AND_WRITE',
	ReadOnly = 'READ_ONLY',
	ReadWriteAndShare = 'READ_WRITE_AND_SHARE'
}

/**  Definition of the ShareSort enumerator. This is useful for sorting the result of a list of shares. */
export enum ShareSort {
	CreationAsc = 'CREATION_ASC',
	CreationDesc = 'CREATION_DESC',
	ExpirationAsc = 'EXPIRATION_ASC',
	ExpirationDesc = 'EXPIRATION_DESC',
	/**  The order is ascending: this means that first are shown the shares with fewer permissions. */
	SharePermissionsAsc = 'SHARE_PERMISSIONS_ASC',
	/**  The order is descending: this means that first are shown the shares with more permissions. */
	SharePermissionsDesc = 'SHARE_PERMISSIONS_DESC',
	/**  The order is based on the target user identifier and not on his email or display name. */
	TargetUserAsc = 'TARGET_USER_ASC',
	/**  The order is based on the target user identifier and not on his email or display name. */
	TargetUserDesc = 'TARGET_USER_DESC'
}

export type SharedTarget = DistributionList | User;

/**  Definition of the User type */
export type User = {
	__typename?: 'User';
	/**  Email of the user */
	email: Scalars['String'];
	/**  Full name of the user */
	full_name: Scalars['String'];
	/**  Unique identifier of the folder */
	id: Scalars['ID'];
};

type BaseNode_File_Fragment = {
	__typename?: 'File';
	size: number;
	mime_type: string;
	extension?: string | null;
	version: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

type BaseNode_Folder_Fragment = {
	__typename?: 'Folder';
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

export type BaseNodeFragment = BaseNode_File_Fragment | BaseNode_Folder_Fragment;

type Child_File_Fragment = {
	__typename?: 'File';
	updated_at: number;
	size: number;
	mime_type: string;
	extension?: string | null;
	version: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner: { __typename?: 'User'; id: string; full_name: string; email: string };
	last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
	parent?:
		| {
				__typename?: 'File';
				id: string;
				name: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
	shares: Array<{
		__typename?: 'Share';
		permission: SharePermission;
		created_at: number;
		share_target?:
			| { __typename?: 'DistributionList'; id: string; name: string }
			| { __typename?: 'User'; email: string; full_name: string; id: string }
			| null;
		node:
			| { __typename?: 'File'; id: string; type: NodeType }
			| { __typename?: 'Folder'; id: string; type: NodeType };
	} | null>;
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

type Child_Folder_Fragment = {
	__typename?: 'Folder';
	updated_at: number;
	id: string;
	name: string;
	type: NodeType;
	flagged: boolean;
	rootId?: string | null;
	owner: { __typename?: 'User'; id: string; full_name: string; email: string };
	last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
	parent?:
		| {
				__typename?: 'File';
				id: string;
				name: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
	shares: Array<{
		__typename?: 'Share';
		permission: SharePermission;
		created_at: number;
		share_target?:
			| { __typename?: 'DistributionList'; id: string; name: string }
			| { __typename?: 'User'; email: string; full_name: string; id: string }
			| null;
		node:
			| { __typename?: 'File'; id: string; type: NodeType }
			| { __typename?: 'Folder'; id: string; type: NodeType };
	} | null>;
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

export type ChildFragment = Child_File_Fragment | Child_Folder_Fragment;

export type LinkFragment = {
	__typename?: 'Link';
	id: string;
	url?: string | null;
	description?: string | null;
	expires_at?: number | null;
	created_at: number;
	node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
};

type ParentId_File_Fragment = {
	__typename?: 'File';
	parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
};

type ParentId_Folder_Fragment = {
	__typename?: 'Folder';
	parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
};

export type ParentIdFragment = ParentId_File_Fragment | ParentId_Folder_Fragment;

type Permissions_File_Fragment = {
	__typename?: 'File';
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

type Permissions_Folder_Fragment = {
	__typename?: 'Folder';
	permissions: {
		__typename?: 'Permissions';
		can_read: boolean;
		can_write_file: boolean;
		can_write_folder: boolean;
		can_delete: boolean;
		can_add_version: boolean;
		can_read_link: boolean;
		can_change_link: boolean;
		can_share: boolean;
		can_read_share: boolean;
		can_change_share: boolean;
	};
};

export type PermissionsFragment = Permissions_File_Fragment | Permissions_Folder_Fragment;

export type ShareFragment = {
	__typename?: 'Share';
	permission: SharePermission;
	created_at: number;
	share_target?:
		| { __typename?: 'DistributionList'; id: string; name: string }
		| { __typename?: 'User'; email: string; full_name: string; id: string }
		| null;
	node:
		| { __typename?: 'File'; id: string; type: NodeType }
		| { __typename?: 'Folder'; id: string; type: NodeType };
};

type ShareTarget_DistributionList_Fragment = { __typename?: 'DistributionList'; id: string };

type ShareTarget_User_Fragment = { __typename?: 'User'; id: string };

export type ShareTargetFragment = ShareTarget_DistributionList_Fragment | ShareTarget_User_Fragment;

export type CloneVersionMutationVariables = Exact<{
	node_id: Scalars['ID'];
	version: Scalars['Int'];
}>;

export type CloneVersionMutation = {
	__typename?: 'Mutation';
	cloneVersion: {
		__typename?: 'File';
		version: number;
		size: number;
		updated_at: number;
		keep_forever: boolean;
		cloned_from_version?: number | null;
		last_editor?: { __typename?: 'User'; full_name: string; email: string; id: string } | null;
	};
};

export type CopyNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
	destination_id: Scalars['ID'];
	shares_limit?: InputMaybe<Scalars['Int']>;
}>;

export type CopyNodesMutation = {
	__typename?: 'Mutation';
	copyNodes?: Array<
		| {
				__typename?: 'File';
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
	> | null;
};

export type CreateFolderMutationVariables = Exact<{
	destination_id: Scalars['String'];
	name: Scalars['String'];
	shares_limit?: InputMaybe<Scalars['Int']>;
}>;

export type CreateFolderMutation = {
	__typename?: 'Mutation';
	createFolder:
		| {
				__typename?: 'File';
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  };
};

export type CreateLinkMutationVariables = Exact<{
	node_id: Scalars['ID'];
	description?: InputMaybe<Scalars['String']>;
	expires_at?: InputMaybe<Scalars['DateTime']>;
}>;

export type CreateLinkMutation = {
	__typename?: 'Mutation';
	createLink: {
		__typename?: 'Link';
		id: string;
		url?: string | null;
		description?: string | null;
		expires_at?: number | null;
		created_at: number;
		node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
	};
};

export type CreateShareMutationVariables = Exact<{
	node_id: Scalars['ID'];
	share_target_id: Scalars['ID'];
	permission: SharePermission;
	custom_message?: InputMaybe<Scalars['String']>;
}>;

export type CreateShareMutation = {
	__typename?: 'Mutation';
	createShare: {
		__typename?: 'Share';
		permission: SharePermission;
		created_at: number;
		share_target?:
			| { __typename?: 'DistributionList'; id: string; name: string }
			| { __typename?: 'User'; email: string; full_name: string; id: string }
			| null;
		node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
	};
};

export type DeleteLinksMutationVariables = Exact<{
	link_ids: Array<Scalars['ID']> | Scalars['ID'];
}>;

export type DeleteLinksMutation = { __typename?: 'Mutation'; deleteLinks: Array<string | null> };

export type DeleteNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
}>;

export type DeleteNodesMutation = { __typename?: 'Mutation'; deleteNodes?: Array<string> | null };

export type DeleteShareMutationVariables = Exact<{
	node_id: Scalars['ID'];
	share_target_id: Scalars['ID'];
}>;

export type DeleteShareMutation = { __typename?: 'Mutation'; deleteShare: boolean };

export type DeleteVersionsMutationVariables = Exact<{
	node_id: Scalars['ID'];
	versions?: InputMaybe<Array<Scalars['Int']> | Scalars['Int']>;
}>;

export type DeleteVersionsMutation = {
	__typename?: 'Mutation';
	deleteVersions: Array<number | null>;
};

export type FlagNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
	flag: Scalars['Boolean'];
}>;

export type FlagNodesMutation = { __typename?: 'Mutation'; flagNodes?: Array<string> | null };

export type KeepVersionsMutationVariables = Exact<{
	node_id: Scalars['ID'];
	versions: Array<Scalars['Int']> | Scalars['Int'];
	keep_forever: Scalars['Boolean'];
}>;

export type KeepVersionsMutation = { __typename?: 'Mutation'; keepVersions: Array<number | null> };

export type MoveNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
	destination_id: Scalars['ID'];
}>;

export type MoveNodesMutation = {
	__typename?: 'Mutation';
	moveNodes?: Array<
		| {
				__typename?: 'File';
				id: string;
				parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
		  }
		| {
				__typename?: 'Folder';
				id: string;
				parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
		  }
	> | null;
};

export type RestoreNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
}>;

export type RestoreNodesMutation = {
	__typename?: 'Mutation';
	restoreNodes?: Array<
		| {
				__typename?: 'File';
				id: string;
				rootId?: string | null;
				parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
		  }
		| {
				__typename?: 'Folder';
				id: string;
				rootId?: string | null;
				parent?: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string } | null;
		  }
		| null
	> | null;
};

export type TrashNodesMutationVariables = Exact<{
	node_ids?: InputMaybe<Array<Scalars['ID']> | Scalars['ID']>;
}>;

export type TrashNodesMutation = { __typename?: 'Mutation'; trashNodes?: Array<string> | null };

export type UpdateLinkMutationVariables = Exact<{
	link_id: Scalars['ID'];
	description?: InputMaybe<Scalars['String']>;
	expires_at?: InputMaybe<Scalars['DateTime']>;
}>;

export type UpdateLinkMutation = {
	__typename?: 'Mutation';
	updateLink?: {
		__typename?: 'Link';
		id: string;
		url?: string | null;
		description?: string | null;
		expires_at?: number | null;
		created_at: number;
	} | null;
};

export type UpdateNodeMutationVariables = Exact<{
	node_id: Scalars['String'];
	name?: InputMaybe<Scalars['String']>;
	description?: InputMaybe<Scalars['String']>;
	shares_limit?: InputMaybe<Scalars['Int']>;
}>;

export type UpdateNodeMutation = {
	__typename?: 'Mutation';
	updateNode:
		| {
				__typename?: 'File';
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  };
};

export type UpdateNodeDescriptionMutationVariables = Exact<{
	node_id: Scalars['String'];
	description?: InputMaybe<Scalars['String']>;
}>;

export type UpdateNodeDescriptionMutation = {
	__typename?: 'Mutation';
	updateNode:
		| { __typename?: 'File'; id: string; description: string }
		| { __typename?: 'Folder'; id: string; description: string };
};

export type UpdateShareMutationVariables = Exact<{
	node_id: Scalars['ID'];
	share_target_id: Scalars['ID'];
	permission: SharePermission;
}>;

export type UpdateShareMutation = {
	__typename?: 'Mutation';
	updateShare?: {
		__typename?: 'Share';
		permission: SharePermission;
		created_at: number;
		share_target?:
			| { __typename?: 'DistributionList'; id: string; name: string }
			| { __typename?: 'User'; email: string; full_name: string; id: string }
			| null;
		node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
	} | null;
};

export type FindNodesQueryVariables = Exact<{
	keywords?: InputMaybe<Array<Scalars['String']> | Scalars['String']>;
	flagged?: InputMaybe<Scalars['Boolean']>;
	shared_by_me?: InputMaybe<Scalars['Boolean']>;
	shared_with_me?: InputMaybe<Scalars['Boolean']>;
	folder_id?: InputMaybe<Scalars['String']>;
	cascade?: InputMaybe<Scalars['Boolean']>;
	limit: Scalars['Int'];
	page_token?: InputMaybe<Scalars['String']>;
	sort?: InputMaybe<NodeSort>;
	shares_limit?: InputMaybe<Scalars['Int']>;
	direct_share?: InputMaybe<Scalars['Boolean']>;
}>;

export type FindNodesQuery = {
	__typename?: 'Query';
	findNodes?: {
		__typename?: 'NodePage';
		page_token?: string | null;
		nodes: Array<
			| {
					__typename?: 'File';
					updated_at: number;
					size: number;
					mime_type: string;
					extension?: string | null;
					version: number;
					id: string;
					name: string;
					type: NodeType;
					flagged: boolean;
					rootId?: string | null;
					owner: { __typename?: 'User'; id: string; full_name: string; email: string };
					last_editor?: {
						__typename?: 'User';
						id: string;
						full_name: string;
						email: string;
					} | null;
					parent?:
						| {
								__typename?: 'File';
								id: string;
								name: string;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| {
								__typename?: 'Folder';
								id: string;
								name: string;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| null;
					shares: Array<{
						__typename?: 'Share';
						permission: SharePermission;
						created_at: number;
						share_target?:
							| { __typename?: 'DistributionList'; id: string; name: string }
							| { __typename?: 'User'; email: string; full_name: string; id: string }
							| null;
						node:
							| { __typename?: 'File'; id: string; type: NodeType }
							| { __typename?: 'Folder'; id: string; type: NodeType };
					} | null>;
					permissions: {
						__typename?: 'Permissions';
						can_read: boolean;
						can_write_file: boolean;
						can_write_folder: boolean;
						can_delete: boolean;
						can_add_version: boolean;
						can_read_link: boolean;
						can_change_link: boolean;
						can_share: boolean;
						can_read_share: boolean;
						can_change_share: boolean;
					};
			  }
			| {
					__typename?: 'Folder';
					updated_at: number;
					id: string;
					name: string;
					type: NodeType;
					flagged: boolean;
					rootId?: string | null;
					owner: { __typename?: 'User'; id: string; full_name: string; email: string };
					last_editor?: {
						__typename?: 'User';
						id: string;
						full_name: string;
						email: string;
					} | null;
					parent?:
						| {
								__typename?: 'File';
								id: string;
								name: string;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| {
								__typename?: 'Folder';
								id: string;
								name: string;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| null;
					shares: Array<{
						__typename?: 'Share';
						permission: SharePermission;
						created_at: number;
						share_target?:
							| { __typename?: 'DistributionList'; id: string; name: string }
							| { __typename?: 'User'; email: string; full_name: string; id: string }
							| null;
						node:
							| { __typename?: 'File'; id: string; type: NodeType }
							| { __typename?: 'Folder'; id: string; type: NodeType };
					} | null>;
					permissions: {
						__typename?: 'Permissions';
						can_read: boolean;
						can_write_file: boolean;
						can_write_folder: boolean;
						can_delete: boolean;
						can_add_version: boolean;
						can_read_link: boolean;
						can_change_link: boolean;
						can_share: boolean;
						can_read_share: boolean;
						can_change_share: boolean;
					};
			  }
			| null
		>;
	} | null;
};

export type GetAccountByEmailQueryVariables = Exact<{
	email: Scalars['String'];
}>;

export type GetAccountByEmailQuery = {
	__typename?: 'Query';
	getAccountByEmail?:
		| { __typename?: 'DistributionList'; id: string }
		| { __typename?: 'User'; id: string }
		| null;
};

export type GetAccountsByEmailQueryVariables = Exact<{
	emails: Array<Scalars['String']> | Scalars['String'];
}>;

export type GetAccountsByEmailQuery = {
	__typename?: 'Query';
	getAccountsByEmail: Array<
		| { __typename?: 'DistributionList'; id: string; name: string }
		| { __typename?: 'User'; id: string; email: string; full_name: string }
		| null
	>;
};

export type GetBaseNodeQueryVariables = Exact<{
	node_id: Scalars['ID'];
}>;

export type GetBaseNodeQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
};

export type GetChildQueryVariables = Exact<{
	node_id: Scalars['ID'];
	shares_limit?: InputMaybe<Scalars['Int']>;
}>;

export type GetChildQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; full_name: string; email: string };
				last_editor?: { __typename?: 'User'; id: string; full_name: string; email: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
};

export type GetChildrenQueryVariables = Exact<{
	node_id: Scalars['ID'];
	children_limit: Scalars['Int'];
	page_token?: InputMaybe<Scalars['String']>;
	sort: NodeSort;
	shares_limit?: InputMaybe<Scalars['Int']>;
}>;

export type GetChildrenQuery = {
	__typename?: 'Query';
	getNode?:
		| { __typename?: 'File'; id: string; name: string }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				children: {
					__typename?: 'NodePage';
					page_token?: string | null;
					nodes: Array<
						| {
								__typename?: 'File';
								updated_at: number;
								size: number;
								mime_type: string;
								extension?: string | null;
								version: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner: { __typename?: 'User'; id: string; full_name: string; email: string };
								last_editor?: {
									__typename?: 'User';
									id: string;
									full_name: string;
									email: string;
								} | null;
								parent?:
									| {
											__typename?: 'File';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| {
											__typename?: 'Folder';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| null;
								shares: Array<{
									__typename?: 'Share';
									permission: SharePermission;
									created_at: number;
									share_target?:
										| { __typename?: 'DistributionList'; id: string; name: string }
										| { __typename?: 'User'; email: string; full_name: string; id: string }
										| null;
									node:
										| { __typename?: 'File'; id: string; type: NodeType }
										| { __typename?: 'Folder'; id: string; type: NodeType };
								} | null>;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| {
								__typename?: 'Folder';
								updated_at: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner: { __typename?: 'User'; id: string; full_name: string; email: string };
								last_editor?: {
									__typename?: 'User';
									id: string;
									full_name: string;
									email: string;
								} | null;
								parent?:
									| {
											__typename?: 'File';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| {
											__typename?: 'Folder';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| null;
								shares: Array<{
									__typename?: 'Share';
									permission: SharePermission;
									created_at: number;
									share_target?:
										| { __typename?: 'DistributionList'; id: string; name: string }
										| { __typename?: 'User'; email: string; full_name: string; id: string }
										| null;
									node:
										| { __typename?: 'File'; id: string; type: NodeType }
										| { __typename?: 'Folder'; id: string; type: NodeType };
								} | null>;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| null
					>;
				};
		  }
		| null;
};

export type GetConfigsQueryVariables = Exact<{ [key: string]: never }>;

export type GetConfigsQuery = {
	__typename?: 'Query';
	getConfigs: Array<{ __typename?: 'Config'; name: string; value: string } | null>;
};

export type GetNodeQueryVariables = Exact<{
	node_id: Scalars['ID'];
	children_limit: Scalars['Int'];
	page_token?: InputMaybe<Scalars['String']>;
	sort: NodeSort;
	shares_limit: Scalars['Int'];
	shares_cursor?: InputMaybe<Scalars['String']>;
	shares_sorts?: InputMaybe<Array<ShareSort> | ShareSort>;
}>;

export type GetNodeQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				description: string;
				created_at: number;
				updated_at: number;
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				owner: { __typename?: 'User'; id: string; email: string; full_name: string };
				creator: { __typename?: 'User'; id: string; email: string; full_name: string };
				last_editor?: { __typename?: 'User'; id: string; email: string; full_name: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				description: string;
				created_at: number;
				updated_at: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				children: {
					__typename?: 'NodePage';
					page_token?: string | null;
					nodes: Array<
						| {
								__typename?: 'File';
								updated_at: number;
								size: number;
								mime_type: string;
								extension?: string | null;
								version: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner: { __typename?: 'User'; id: string; full_name: string; email: string };
								last_editor?: {
									__typename?: 'User';
									id: string;
									full_name: string;
									email: string;
								} | null;
								parent?:
									| {
											__typename?: 'File';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| {
											__typename?: 'Folder';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| null;
								shares: Array<{
									__typename?: 'Share';
									permission: SharePermission;
									created_at: number;
									share_target?:
										| { __typename?: 'DistributionList'; id: string; name: string }
										| { __typename?: 'User'; email: string; full_name: string; id: string }
										| null;
									node:
										| { __typename?: 'File'; id: string; type: NodeType }
										| { __typename?: 'Folder'; id: string; type: NodeType };
								} | null>;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| {
								__typename?: 'Folder';
								updated_at: number;
								id: string;
								name: string;
								type: NodeType;
								flagged: boolean;
								rootId?: string | null;
								owner: { __typename?: 'User'; id: string; full_name: string; email: string };
								last_editor?: {
									__typename?: 'User';
									id: string;
									full_name: string;
									email: string;
								} | null;
								parent?:
									| {
											__typename?: 'File';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| {
											__typename?: 'Folder';
											id: string;
											name: string;
											permissions: {
												__typename?: 'Permissions';
												can_read: boolean;
												can_write_file: boolean;
												can_write_folder: boolean;
												can_delete: boolean;
												can_add_version: boolean;
												can_read_link: boolean;
												can_change_link: boolean;
												can_share: boolean;
												can_read_share: boolean;
												can_change_share: boolean;
											};
									  }
									| null;
								shares: Array<{
									__typename?: 'Share';
									permission: SharePermission;
									created_at: number;
									share_target?:
										| { __typename?: 'DistributionList'; id: string; name: string }
										| { __typename?: 'User'; email: string; full_name: string; id: string }
										| null;
									node:
										| { __typename?: 'File'; id: string; type: NodeType }
										| { __typename?: 'Folder'; id: string; type: NodeType };
								} | null>;
								permissions: {
									__typename?: 'Permissions';
									can_read: boolean;
									can_write_file: boolean;
									can_write_folder: boolean;
									can_delete: boolean;
									can_add_version: boolean;
									can_read_link: boolean;
									can_change_link: boolean;
									can_share: boolean;
									can_read_share: boolean;
									can_change_share: boolean;
								};
						  }
						| null
					>;
				};
				owner: { __typename?: 'User'; id: string; email: string; full_name: string };
				creator: { __typename?: 'User'; id: string; email: string; full_name: string };
				last_editor?: { __typename?: 'User'; id: string; email: string; full_name: string } | null;
				parent?:
					| {
							__typename?: 'File';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
};

export type GetNodeLinksQueryVariables = Exact<{
	node_id: Scalars['ID'];
}>;

export type GetNodeLinksQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				id: string;
				links: Array<{
					__typename?: 'Link';
					id: string;
					url?: string | null;
					description?: string | null;
					expires_at?: number | null;
					created_at: number;
					node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
				} | null>;
		  }
		| {
				__typename?: 'Folder';
				id: string;
				links: Array<{
					__typename?: 'Link';
					id: string;
					url?: string | null;
					description?: string | null;
					expires_at?: number | null;
					created_at: number;
					node: { __typename?: 'File'; id: string } | { __typename?: 'Folder'; id: string };
				} | null>;
		  }
		| null;
};

export type GetParentQueryVariables = Exact<{
	node_id: Scalars['ID'];
}>;

export type GetParentQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?:
					| {
							__typename?: 'File';
							size: number;
							mime_type: string;
							extension?: string | null;
							version: number;
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							parent?:
								| {
										__typename?: 'File';
										size: number;
										mime_type: string;
										extension?: string | null;
										version: number;
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| {
										__typename?: 'Folder';
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| null;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							parent?:
								| {
										__typename?: 'File';
										size: number;
										mime_type: string;
										extension?: string | null;
										version: number;
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| {
										__typename?: 'Folder';
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| null;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				parent?:
					| {
							__typename?: 'File';
							size: number;
							mime_type: string;
							extension?: string | null;
							version: number;
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							parent?:
								| {
										__typename?: 'File';
										size: number;
										mime_type: string;
										extension?: string | null;
										version: number;
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| {
										__typename?: 'Folder';
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| null;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| {
							__typename?: 'Folder';
							id: string;
							name: string;
							type: NodeType;
							flagged: boolean;
							rootId?: string | null;
							parent?:
								| {
										__typename?: 'File';
										size: number;
										mime_type: string;
										extension?: string | null;
										version: number;
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| {
										__typename?: 'Folder';
										id: string;
										name: string;
										type: NodeType;
										flagged: boolean;
										rootId?: string | null;
										permissions: {
											__typename?: 'Permissions';
											can_read: boolean;
											can_write_file: boolean;
											can_write_folder: boolean;
											can_delete: boolean;
											can_add_version: boolean;
											can_read_link: boolean;
											can_change_link: boolean;
											can_share: boolean;
											can_read_share: boolean;
											can_change_share: boolean;
										};
								  }
								| null;
							permissions: {
								__typename?: 'Permissions';
								can_read: boolean;
								can_write_file: boolean;
								can_write_folder: boolean;
								can_delete: boolean;
								can_add_version: boolean;
								can_read_link: boolean;
								can_change_link: boolean;
								can_share: boolean;
								can_read_share: boolean;
								can_change_share: boolean;
							};
					  }
					| null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
};

export type GetPathQueryVariables = Exact<{
	node_id: Scalars['ID'];
}>;

export type GetPathQuery = {
	__typename?: 'Query';
	getPath: Array<
		| {
				__typename?: 'File';
				size: number;
				mime_type: string;
				extension?: string | null;
				version: number;
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				name: string;
				type: NodeType;
				flagged: boolean;
				rootId?: string | null;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null
	>;
};

export type GetPermissionsQueryVariables = Exact<{
	node_id: Scalars['ID'];
}>;

export type GetPermissionsQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				id: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| {
				__typename?: 'Folder';
				id: string;
				permissions: {
					__typename?: 'Permissions';
					can_read: boolean;
					can_write_file: boolean;
					can_write_folder: boolean;
					can_delete: boolean;
					can_add_version: boolean;
					can_read_link: boolean;
					can_change_link: boolean;
					can_share: boolean;
					can_read_share: boolean;
					can_change_share: boolean;
				};
		  }
		| null;
};

export type GetRootsListQueryVariables = Exact<{ [key: string]: never }>;

export type GetRootsListQuery = {
	__typename?: 'Query';
	getRootsList: Array<{ __typename?: 'Root'; id: string; name: string } | null>;
};

export type GetSharesQueryVariables = Exact<{
	node_id: Scalars['ID'];
	shares_limit: Scalars['Int'];
	shares_cursor?: InputMaybe<Scalars['String']>;
	shares_sorts?: InputMaybe<Array<ShareSort> | ShareSort>;
}>;

export type GetSharesQuery = {
	__typename?: 'Query';
	getNode?:
		| {
				__typename?: 'File';
				id: string;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
		  }
		| {
				__typename?: 'Folder';
				id: string;
				shares: Array<{
					__typename?: 'Share';
					permission: SharePermission;
					created_at: number;
					share_target?:
						| { __typename?: 'DistributionList'; id: string; name: string }
						| { __typename?: 'User'; email: string; full_name: string; id: string }
						| null;
					node:
						| { __typename?: 'File'; id: string; type: NodeType }
						| { __typename?: 'Folder'; id: string; type: NodeType };
				} | null>;
		  }
		| null;
};

export type GetVersionsQueryVariables = Exact<{
	node_id: Scalars['ID'];
	versions?: InputMaybe<Array<Scalars['Int']> | Scalars['Int']>;
}>;

export type GetVersionsQuery = {
	__typename?: 'Query';
	getVersions: Array<{
		__typename?: 'File';
		version: number;
		size: number;
		updated_at: number;
		keep_forever: boolean;
		cloned_from_version?: number | null;
		last_editor?: { __typename?: 'User'; full_name: string; email: string; id: string } | null;
	} | null>;
};
